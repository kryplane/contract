#!/usr/bin/env node

const { ethers } = require("hardhat");
const fs = require('fs');
const path = require('path');

async function main() {
  console.log("🚀 ShadowChat Protocol - Frontend Demo Setup");
  console.log("=" .repeat(60));

  try {
    // Check if we're on a local network
    const network = await ethers.provider.getNetwork();
    console.log(`📡 Network: ${network.name} (Chain ID: ${network.chainId})`);
    
    if (network.chainId !== 31337n) {
      console.log("⚠️  Warning: This demo is designed for local Hardhat network");
      console.log("   Make sure to run 'npx hardhat node' first");
    }

    // Get signers
    const [deployer, user1, user2] = await ethers.getSigners();
    console.log(`👤 Deployer: ${deployer.address}`);
    console.log(`👤 User 1: ${user1.address}`);
    console.log(`👤 User 2: ${user2.address}`);
    console.log("");

    // Deploy contracts
    console.log("📦 Deploying ShadowChat contracts...");
    
    const messageFee = ethers.parseEther("0.001");
    const withdrawalFee = ethers.parseEther("0.0001");
    const initialShards = 3;

    // Deploy Factory
    const ShadowChatFactory = await ethers.getContractFactory("ShadowChatFactory");
    const factory = await ShadowChatFactory.deploy(messageFee, withdrawalFee, initialShards);
    await factory.waitForDeployment();
    
    // Deploy Batch Helper
    const ShadowChatBatch = await ethers.getContractFactory("ShadowChatBatch");
    const batch = await ShadowChatBatch.deploy(await factory.getAddress());
    await batch.waitForDeployment();
    
    const factoryAddress = await factory.getAddress();
    const batchAddress = await batch.getAddress();
    
    console.log(`✅ Factory deployed at: ${factoryAddress}`);
    console.log(`✅ Batch deployed at: ${batchAddress}`);
    console.log("");

    // Get shard addresses
    const shards = await factory.getAllShards();
    console.log(`🗂️  Deployed ${shards.length} shards:`);
    shards.forEach((shard, i) => {
      console.log(`   Shard ${i}: ${shard}`);
    });
    console.log("");

    // Create frontend configuration
    const frontendConfigPath = path.join(__dirname, '../frontend/.env');
    const frontendConfig = `# ShadowChat Frontend Configuration - Generated by demo
VITE_FACTORY_ADDRESS=${factoryAddress}
VITE_BATCH_ADDRESS=${batchAddress}
VITE_NETWORK_NAME=localhost
VITE_CHAIN_ID=31337
VITE_DEBUG_MODE=true
`;

    fs.writeFileSync(frontendConfigPath, frontendConfig);
    console.log(`📝 Created frontend configuration: ${frontendConfigPath}`);
    console.log("");

    // Setup demo identities and credits
    console.log("👥 Setting up demo identities...");
    
    const demoIdentities = [
      {
        name: "Alice",
        secretCode: "alice_secret_demo_key_12345678",
        signer: user1
      },
      {
        name: "Bob", 
        secretCode: "bob_secret_demo_key_87654321",
        signer: user2
      }
    ];

    for (const identity of demoIdentities) {
      const receiverHash = ethers.keccak256(ethers.toUtf8Bytes(identity.secretCode));
      const [shardAddress] = await factory.getShardForReceiver(receiverHash);
      
      // Get shard contract
      const ShadowChat = await ethers.getContractFactory("ShadowChat");
      const shard = ShadowChat.attach(shardAddress);
      
      // Deposit some credits
      const creditAmount = ethers.parseEther("0.01");
      await shard.connect(identity.signer).depositCredit(receiverHash, { value: creditAmount });
      
      console.log(`   ${identity.name}:`);
      console.log(`     Secret: ${identity.secretCode}`);
      console.log(`     Hash: ${receiverHash}`);
      console.log(`     Credits: 0.01 ETH`);
      console.log(`     Shard: ${shardAddress}`);
    }
    console.log("");

    // Send a demo message
    console.log("📨 Sending demo message...");
    const aliceSecret = demoIdentities[0].secretCode;
    const bobSecret = demoIdentities[1].secretCode;
    const bobHash = ethers.keccak256(ethers.toUtf8Bytes(bobSecret));
    
    // Simple encryption (matching frontend crypto.js)
    const CryptoJS = require('crypto-js');
    const demoMessage = "Hello Bob! This is a demo message from Alice. 🕶️";
    const encryptedMessage = CryptoJS.AES.encrypt(demoMessage, bobSecret).toString();
    
    const [bobShardAddress] = await factory.getShardForReceiver(bobHash);
    const ShadowChat = await ethers.getContractFactory("ShadowChat");
    const bobShard = ShadowChat.attach(bobShardAddress);
    
    await bobShard.connect(user1).sendMessage(bobHash, encryptedMessage);
    console.log(`✅ Sent encrypted message from Alice to Bob`);
    console.log(`   Message: "${demoMessage}"`);
    console.log(`   Encrypted: ${encryptedMessage.substring(0, 50)}...`);
    console.log("");

    // Display frontend setup instructions
    console.log("🌐 Frontend Setup Complete!");
    console.log("=" .repeat(60));
    console.log("");
    console.log("To start the frontend application:");
    console.log("   cd frontend");
    console.log("   npm install");
    console.log("   npm run dev");
    console.log("");
    console.log("Then visit: http://localhost:3000");
    console.log("");
    console.log("Demo Identities for Testing:");
    console.log(`   Alice Secret: ${aliceSecret}`);
    console.log(`   Bob Secret: ${bobSecret}`);
    console.log("");
    console.log("Demo Workflow:");
    console.log("1. Connect MetaMask to localhost:8545");
    console.log("2. Import one of the demo secret codes in Identity tab");
    console.log("3. Check Credits tab - you should see 0.01 ETH");
    console.log("4. Go to Messages tab to see/send messages");
    console.log("5. Use Analytics tab to monitor activity");
    console.log("");
    console.log("⚠️  Note: Make sure MetaMask is connected to Hardhat local network!");
    console.log("   Network: Localhost 8545");
    console.log("   Chain ID: 31337");

  } catch (error) {
    console.error("❌ Demo setup failed:", error);
    process.exit(1);
  }
}

if (require.main === module) {
  main()
    .then(() => process.exit(0))
    .catch((error) => {
      console.error(error);
      process.exit(1);
    });
}

module.exports = main;